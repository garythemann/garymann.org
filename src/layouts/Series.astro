---
import { type CollectionEntry, render } from "astro:content";
import SeriesPanel from "@/components/SeriesPanel.astro";
import ScrollToTop from "@/components/atoms/ScrollToTop.astro";
import TOC from "@/components/blog/TOC.astro";
import { Icon } from "astro-icon/components";
import BaseLayout from "./Base.astro";

interface Props {
	series: CollectionEntry<"series">;
}

const { series } = Astro.props;
const { title, description } = series.data;

const { headings } = await render(series);
---

<BaseLayout meta={{ description, title }}>
	<!-- SeriesPanel     "sidebar" -->
	{series.id && <SeriesPanel slot="sidebar" seriesId={series.id} />}

	<div class="flex items-end md:sticky md:top-8 md:z-20">
		<button
			id="toggle-panel"
			class="z-30 mr-2 hidden h-8 w-8 flex-shrink-0 items-center justify-center rounded-lg bg-accent-base/10 text-accent-base hover:text-accent-base/90 md:flex"
			aria-label="Toggle Series Panel"
			aria-controls="series-panel"
		>
			<Icon
				aria-hidden="true"
				class="h-6 w-6 flex-shrink-0"
				focusable="false"
				name="mdi:bookmark-multiple"
			/>
		</button>

		<h1
			class="line-clamp-none font-semibold text-accent-base md:sticky md:top-4 md:z-20 md:line-clamp-1 md:max-w-lg lg:max-w-xl"
		>
			{title}
		</h1>
	</div>
	<p class="prose prose-citrus mt-[1.125rem] max-w-none">
		{description}
	</p>

	<div class="mt-6 flex gap-x-8 sm:grid-cols-[auto_1fr] md:items-start">
		<article class="grid flex-grow grid-cols-1 break-words pt-4" data-pagefind-body>
			<div
				class="prose prose-citrus max-w-none flex-grow prose-headings:font-semibold prose-headings:text-accent-base prose-headings:before:text-accent-two"
			>
				<slot />
			</div>
		</article>
		{
			!!headings.length && (
				<aside class="sticky z-10 hidden rounded-lg md:top-20 md:block md:w-[16rem] md:min-w-[16rem]">
					<TOC headings={headings} />
				</aside>
			)
		}
	</div>

	<ScrollToTop />

	<mobile-button
		id="toggle-panel-mobile"
		class="hover:text-bg-accent-base/90 fixed bottom-4 right-4 z-50 block flex size-12 items-center justify-center rounded-lg border border-special-lighter bg-bgColor text-accent-base shadow-[0px_10px_25px_rgba(0,0,0,0.15)] sm:hidden"
		aria-role="button"
		aria-label="Toggle Series Panel"
	>
		<span
			class="absolute inset-0 flex items-center justify-center rounded-lg bg-special-light hover:text-accent-base/90"
		>
			<Icon class="size-8" name="mdi:bookmark-multiple" />
		</span>
	</mobile-button>
</BaseLayout>

<script>
	const ANIMATION_DURATION = 300;
	//
	const togglePanelBtn = document.getElementById("toggle-panel");
	const closePanelBtn = document.getElementById("close-panel");
	const seriesPanel = document.getElementById("series-panel");
	const togglePanelMobileBtn = document.getElementById("toggle-panel-mobile");

	// ,  seriesPanel
	if (!seriesPanel) {
		console.error(" series-panel  ");
		throw new Error("series-panel is required");
	}

	//   ,
	const isPanelVisible = () => {
		const isScreenLg = window.matchMedia("(min-width: 1024px)").matches; //
		return (
			(isScreenLg && seriesPanel.classList.contains("lg:block")) ||
			(!isScreenLg && !seriesPanel.classList.contains("hidden"))
		);
	};

	//
	const hidePanel = () => {
		seriesPanel.classList.add("opacity-0", "-translate-x-full");
		setTimeout(() => {
			seriesPanel.classList.remove("block", "lg:block");
			seriesPanel.classList.add("hidden");
		}, ANIMATION_DURATION);
	};

	//
	const showPanel = () => {
		seriesPanel.classList.remove("hidden");
		seriesPanel.classList.add("block", "lg:block");
		setTimeout(() => {
			seriesPanel.classList.remove("opacity-0", "-translate-x-full");
		}, 10);
	};

	//
	const togglePanel = () => {
		if (isPanelVisible()) {
			hidePanel(); //  ,
		} else {
			showPanel(); //  ,
		}
	};

	//
	if (togglePanelBtn) {
		togglePanelBtn.addEventListener("click", togglePanel);
	} else {
		console.error(" toggle-panel  ");
	}

	if (togglePanelMobileBtn) {
		togglePanelMobileBtn.addEventListener("click", togglePanel);
	} else {
		console.error(" toggle-panel-mobile  ");
	}

	if (closePanelBtn) {
		closePanelBtn.addEventListener("click", hidePanel);
	} else {
		console.error(" close-panel  ");
	}
</script>
