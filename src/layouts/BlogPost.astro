---
import { type CollectionEntry, render } from "astro:content";
import Backdrop from "@/components/Backdrop.astro";
import SeriesPanel from "@/components/SeriesPanel.astro";
import Masthead from "@/components/blog/Masthead.astro";
import TOC from "@/components/blog/TOC.astro";
import ScrollToTop from "@/components/atoms/ScrollToTop.astro";
import WebMentions from "@/components/blog/webmentions/index.astro";
import { Icon } from "astro-icon/components";
import BaseLayout from "./Base.astro";

interface Props {
	post: CollectionEntry<"post">;
}

const { post } = Astro.props;
const { ogImage, title, description, updatedDate, publishDate, seriesId } = post.data;

const socialImage = ogImage ?? `/og-image/${post.id}.png`;
const articleDate = updatedDate?.toISOString() ?? publishDate.toISOString();
const { headings } = await render(post);
---

<BaseLayout meta={{ articleDate, description, ogImage: socialImage, title }}>
	<Backdrop />

	<!-- SeriesPanel is inserted into the named slot "sidebar" -->
	{seriesId && <SeriesPanel slot="sidebar" seriesId={seriesId} />}

	<Masthead content={post} />

	<!-- Mobile table of contents  -->
	{
		!!headings.length && (
			<aside class="my-4 md:hidden">
				<TOC headings={headings} />
			</aside>
		)
	}

	<div class="mt-6 flex gap-x-8 sm:grid-cols-[auto_1fr] md:items-start">
		<article class="grid flex-grow grid-cols-1 break-words pt-4" data-pagefind-body>
			<div
				class="prose prose-citrus max-w-none flex-grow prose-headings:font-semibold prose-headings:text-accent-base prose-headings:before:text-accent-two"
			>
				<slot />
			</div>
			<WebMentions />
		</article>
		{
			!!headings.length && (
				<aside class="z-10 hidden md:sticky md:top-20 md:block md:w-[14rem] md:min-w-[14rem]">
					<TOC headings={headings} open />
				</aside>
			)
		}
	</div>

	<ScrollToTop />

	<!-- Series button for mobile screens -->
	{
		seriesId && (
			<mobile-button
				id="toggle-panel-mobile"
				class="hover:text-bg-accent-base/90 fixed bottom-4 right-4 z-50 block flex size-12 items-center justify-center rounded-lg border border-special-lighter bg-bgColor text-accent-base shadow-[0px_10px_25px_rgba(0,0,0,0.15)] sm:hidden"
				aria-role="button"
				aria-label="Toggle Series Panel"
			>
				<span class="absolute inset-0 flex items-center justify-center rounded-lg bg-special-light hover:text-accent-base/90">
					<Icon class="size-8" name="solar:notes-bold" />
				</span>
			</mobile-button>
		)
	}

	<script src="@/components/atoms/CopyCode.client.ts"></script>
</BaseLayout>

<script>
	const ANIMATION_DURATION = 300;
	// Get the button and panel elements
	const togglePanelBtn = document.getElementById("toggle-panel");
	const closePanelBtn = document.getElementById("close-panel");
	const seriesPanel = document.getElementById("series-panel");
	const togglePanelMobileBtn = document.getElementById("toggle-panel-mobile");

	// Ensure the seriesPanel exists
	if (!seriesPanel) {
		console.error("Element series-panel not found");
		throw new Error("series-panel is required");
	}

	// Function to check if the panel is visible
	const isPanelVisible = () => {
		const isScreenLg = window.matchMedia("(min-width: 1024px)").matches; // Large screens
		return (
			(isScreenLg && seriesPanel.classList.contains("lg:block")) ||
			(!isScreenLg && !seriesPanel.classList.contains("hidden"))
		);
	};

	// Function to hide the panel
	const hidePanel = () => {
		seriesPanel.classList.add("opacity-0", "-translate-x-full");
		setTimeout(() => {
			seriesPanel.classList.remove("block", "lg:block");
			seriesPanel.classList.add("hidden");
		}, ANIMATION_DURATION);
	};

	// Function to show the panel
	const showPanel = () => {
		seriesPanel.classList.remove("hidden");
		seriesPanel.classList.add("block", "lg:block");
		setTimeout(() => {
			seriesPanel.classList.remove("opacity-0", "-translate-x-full");
		}, 10);
	};

	// Common event handler for both buttons
	const togglePanel = () => {
		if (isPanelVisible()) {
			hidePanel(); // If visible, hide it
		} else {
			showPanel(); // If hidden, show it
		}
	};

	// Event handlers for both buttons
	if (togglePanelBtn) {
		togglePanelBtn.addEventListener("click", togglePanel);
	} else {
		console.error("Element toggle-panel not found");
	}

	if (togglePanelMobileBtn) {
		togglePanelMobileBtn.addEventListener("click", togglePanel);
	} else {
		console.error("Element toggle-panel-mobile not found");
	}

	if (closePanelBtn) {
		closePanelBtn.addEventListener("click", hidePanel);
	} else {
		console.error("Element close-panel not found");
	}
</script>

<script>
	// Wait for the content to fully load
	document.addEventListener("DOMContentLoaded", () => {
		const buttonsPanel = document.getElementById("buttons-panel");

		if (buttonsPanel) {
			buttonsPanel.classList.add("fixed");
			console.log("Class 'fixed' added to the buttons-panel element.");
		} else {
			console.error("Element with ID 'buttons-panel' not found.");
		}
	});
</script>
