---
import { Icon } from "astro-icon/components";

interface Props {
	visible?: boolean;
}

const { visible } = Astro.props;
---

<mobile-button
	aria-expanded="false"
	aria-haspopup="menu"
	aria-role="button"
	aria-label="Open main menu"
	class="group relative h-8 w-8 rounded-lg bg-color-100 text-accent-base hover:bg-accent-base/10 [&>#close-nav-menu-icon]:aria-expanded:scale-100 [&>#close-nav-menu-icon]:aria-expanded:opacity-100 [&>#open-nav-menu-icon]:aria-expanded:scale-0 [&>#open-nav-menu-icon]:aria-expanded:opacity-0"
	class:list={{ "md:invisible md:hidden": !visible }}
	id="toggle-nav-menu-mobile"
	type="button"
>
	<Icon
		id="open-nav-menu-icon"
		aria-hidden="true"
		class="absolute start-1/2 top-1/2 h-6 w-6 -translate-x-1/2 -translate-y-1/2 scale-100 opacity-100 transition-all"
		focusable="false"
		name="ei:navicon"
	/>
	<Icon
		id="close-nav-menu-icon"
		aria-hidden="true"
		class="absolute start-1/2 top-1/2 h-6 w-6 -translate-x-1/2 -translate-y-1/2 scale-0 opacity-0 transition-all"
		focusable="false"
		name="ei:close"
	/>
</mobile-button>

<script>
	document.addEventListener("DOMContentLoaded", () => {
		const toggleNavMenuMobileButton = document.getElementById("toggle-nav-menu-mobile");
		const toggleNavMenuButtons = document.querySelectorAll("[data-toggle-nav-menu]");
		const openMenuIcon = document.getElementById("open-nav-menu-icon");
		const closeMenuIcon = document.getElementById("close-nav-menu-icon");
		const drawer = document.getElementById("drawer");

		//
		if (!toggleNavMenuMobileButton || !openMenuIcon || !closeMenuIcon || !drawer) {
			console.error("One or more required elements are missing in the DOM.");
			return;
		}

		const drawerBody = document.getElementById("drawer-body");
		if (!drawerBody) {
			console.error("Drawer body element is missing in the DOM.");
			return;
		}

		const toggleMainMenu = () => {
			const isOpen = toggleNavMenuMobileButton.getAttribute("aria-expanded") === "true";

			if (isOpen) {
				drawer.classList.add("hidden");
				drawer.setAttribute("aria-hidden", "true");
			} else {
				drawer.classList.remove("hidden");
				drawer.removeAttribute("aria-hidden");
			}

			toggleNavMenuMobileButton.setAttribute("aria-expanded", (!isOpen).toString());
		};

		for (const e of [toggleNavMenuMobileButton, ...toggleNavMenuButtons]) {
			e.addEventListener("click", toggleMainMenu);
		}

		document.addEventListener("keydown", (e) => {
			if (e.key == "Escape") {
				if (toggleNavMenuMobileButton.getAttribute("aria-expanded") === "true") {
					toggleMainMenu();
				}
			}
		});
	});
</script>
